// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Agency {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  location String
  phone    String
  email    String
  logoSrc  String?

  // Agrega un campo `groupIds` para almacenar los IDs de los grupos asociados a la agencia
  groupIds  String[] 

  // Remueve la relaci√≥n `groups` existente

  groups    Group[] 
  inQueue Queue[]
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  coordinator String
  school      String
  entry       String
  exit        String

  agencyId    String?  @db.ObjectId
  agency      Agency?  @relation(fields: [agencyId], references: [id])

  agencyName  String? 
  photosIds   String[]
  videoIds    String[]

  codes      Codes[]

  inQueue    Queue[]
}

model Codes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  used        Boolean
  included    Boolean
  optional    Boolean
  type        String
  
  groupId     String?  @db.ObjectId
  group       Group?   @relation(fields: [groupId], references: [id])
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String
  image         String?

  role          UserRole  @default(USER)

  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Queue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  filename    String
  status      String
  createdAt   DateTime @default(now())
  groupId     String?  @db.ObjectId
  group       Group?   @relation(fields: [groupId], references: [id])
  agencyId    String?  @db.ObjectId
  agency      Agency?  @relation(fields: [agencyId], references: [id])
}