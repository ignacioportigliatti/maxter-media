"use client";

import "../globals.css";
import { Providers } from "@/components/auth/Providers";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Sidebar } from "@/components/admin/Sidebar";
import { TbPhotoAi } from "react-icons/tb";
import { AiOutlineHome, AiOutlineVideoCamera } from "react-icons/ai";
import { useEffect, useState } from "react";
import { getGoogleStorageFiles, getGroups } from "@/utils";
import { Group } from "@prisma/client";
import { useSelectGroup } from "@/redux/groupManager";
import { getSignedUrl } from "@/utils/googleStorage/getSignedUrl";

export const metadata = {
  title: "Maxter",
  description: "Generated by create next app",
};

interface FolderWithPhotos {
  folder: string;
  photos: any[];
  thumbnail: string;
}

const navigationItems = [
  {
    label: "Inicio",
    icon: <AiOutlineHome />,
    href: "/client/",
  },
  {
    label: "Mis Videos",
    icon: <AiOutlineVideoCamera />,
    href: "/client/my-videos",
  },
  {
    label: "Mis Fotos",
    icon: <TbPhotoAi />,
    href: "/client/my-photos",
  },
];
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const selectGroup = useSelectGroup();
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const getGroup = async () => {
      const groups: Group[] = await getGroups();
      return groups[5];
    };

    const setGroup = async () => {
      try {
        const group = await getGroup();
        const agencies = await fetch("/api/agencies").then((res) => res.json());
        const selectedAgency = agencies.find(
          (agency: any) => agency.name === group.agencyName
        );
        const bucketName = process.env.NEXT_PUBLIC_BUCKET_NAME;
        const folderPath = `media/${group.name}/videos`;
        const videos = await getGoogleStorageFiles(
          bucketName as string,
          folderPath
        );
        
        const photos = await getGoogleStorageFiles(
          bucketName as string,
          `media/${group.name}/photos`
        );
        const foldersMap = new Map<string, any[]>();

        photos.forEach((photo: any) => {
          const folderPath = photo.name.split("/");
          const folder = folderPath[folderPath.length - 2]; // Obtener la carpeta en lugar de la fecha
          const folderPhotos = foldersMap.get(folder) || [];
          folderPhotos.push(photo);
          foldersMap.set(folder, folderPhotos);
        });

        // Convertir el Map a un array de objetos FolderWithPhotos
        const foldersWithPhotosArray: FolderWithPhotos[] = Array.from(
          foldersMap
        ).map(([folder, photos]) => {
          const thumbnail = photos.length > 0 ? photos[0].url : ""; // Obtener la URL de la primera foto como miniatura
          return {
            folder,
            photos,
            thumbnail,
          };
        });

        const signedPhotos: FolderWithPhotos[] =
          await Promise.all(
            foldersWithPhotosArray.map(async (folderWithPhotos) => {
              const firstPhoto = folderWithPhotos.photos[0];
              const bucketName = process.env.NEXT_PUBLIC_BUCKET_NAME;
              const signedUrl = await getSignedUrl(
                bucketName as string,
                firstPhoto.name
              );
              const signedThumbnail = { ...firstPhoto, url: signedUrl };
              const signedPhotos = [
                signedThumbnail,
                ...folderWithPhotos.photos.slice(1),
              ];
              return {
                ...folderWithPhotos,
                photos: signedPhotos,
                thumbnail: signedThumbnail.url,
              };
            })
          );

        selectGroup(group, videos, signedPhotos, selectedAgency);
      } catch (error) {
        console.log("Error al setear el grupo", error);
      }
    };
    setGroup().finally(() => {
      setIsLoading(false);
    });
  }, []);

  return (
    <html suppressHydrationWarning lang="en">
      <body>
        <Providers>
          {isLoading ? (
            <p>Cargando</p>
          ) : (
            <div className="flex">
              <ToastContainer />
              <div className="hidden lg:flex">
                <Sidebar navigationItems={navigationItems} />
              </div>
              <div className="lg:h-full flex mx-auto w-full">{children}</div>
            </div>
          )}
        </Providers>
      </body>
    </html>
  );
}
